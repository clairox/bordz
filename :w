import { db } from '@/drizzle/db'
import { BoardSetupTable } from '@/drizzle/schema/boardSetup'
import { ComponentTable } from '@/drizzle/schema/component'
import { ProductTable } from '@/drizzle/schema/product'
import {
    createBadRequestError,
    createNotFoundError,
    handleError,
} from '@/lib/errors'
import { eq } from 'drizzle-orm'
import { NextRequest, NextResponse } from 'next/server'
import {
    getComponents,
    getComponentsOverallAvailability,
    getComponentsTotalPrice,
} from '../../shared'
import { ComponentRecord } from '@/types/records'

export const GET = async (
    _: NextRequest,
    context: { params: { productId: string } }
) => {
    const { productId } = context.params

    try {
        const product = await db.query.ProductTable.findFirst({
            where: eq(ProductTable.id, productId),
            with: {
                boardSetup: true,
            },
        })

        if (!product) {
            throw createNotFoundError('Product')
        }

        return NextResponse.json(product)
    } catch (error) {
        return handleError(error as Error)
    }
}

const updateProduct = (
    id: string,
    values: {
        title?: string
        price?: number
        availableForSale?: boolean
        featuredImage?: string
    }
) => {
    return await db
        .update(ProductTable)
        .set({
            title: values.title,
            price: values.price,
            availableForSale: values.availableForSale,
            featuredImage: values.featuredImage,
            updatedAt: new Date(),
        })
        .where(eq(ProductTable.id, id))
}

export const PATCH = async (
    request: NextRequest,
    context: { params: { productId: string } }
) => {
    const { productId } = context.params

    const { type } = await request.json()

    if (type === 'board') {
        const {
            deckId,
            trucksId,
            wheelsId,
            bearingsId,
            hardwareId,
            griptapeId,
        } = await request.json()

        if (
            !(
                deckId &&
                trucksId &&
                wheelsId &&
                bearingsId &&
                hardwareId &&
                griptapeId
            )
        ) {
            return handleError(createBadRequestError('Missing component.'))
        }
        try {
            const components = await getComponents({
                deckId,
                trucksId,
                wheelsId,
                bearingsId,
                hardwareId,
                griptapeId,
            })

            if (
                Object.values(components).some(component => component == null)
            ) {
                throw createNotFoundError('Component')
            }

            const validComponents = components as Record<
                string,
                ComponentRecord
            >

            const totalPrice = getComponentsTotalPrice(validComponents)
            const availability =
                getComponentsOverallAvailability(validComponents)

            const updatedBoardSetup = await db
                .update(BoardSetupTable)
                .set({
                    deckId,
                    trucksId,
                    wheelsId,
                    bearingsId,
                    hardwareId,
                    griptapeId,
                    updatedAt: new Date(),
                })
                .where(eq(BoardSetupTable.productId, productId))
                .returning()
                .then(async rows => {
                    return await db.query.BoardSetupTable.findFirst({
                        where: eq(BoardSetupTable.id, rows[0].id),
                        with: {
                            deck: true,
                            trucks: true,
                            wheels: true,
                            bearings: true,
                            hardware: true,
                            griptape: true,
                        },
                    })
                })

            return NextResponse.json(updatedBoardSetup)
        } catch (error) {
            return handleError(error as Error)
        }
    } else {
    }
}
